name: master CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install npm dependencies (Frontend)
        run: |
          cd app-frontend
          npm install

      - name: Install OpenAPI Generator CLI
        run: npm install @openapitools/openapi-generator-cli -g

      - name: List files in api-contract directory
        run: ls -l api-contract
        working-directory: ./

      - name: Generate API client code
        run: openapi-generator-cli generate -i api-contract/openapi_old.yml -g typescript-axios -o app-frontend/src/api
        working-directory: ./

      - name: Build frontend
        run: npm run build
        working-directory: ./app-frontend

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            profile: minimal
            override: true

      - name: Generate Open API Server
        run: openapi-generator-cli generate -i api-contract/openapi.yml -g rust-server -o app-backend/openapi/
        working-directory: ./

      - name: Print Rust version and environment info
        run: |
          rustc --version
          cargo --version
          echo "Features: $FEATURES"

      - name: Build
        run: cargo build
        working-directory: ./app-backend

      - name: Run tests
        run: cargo test
        working-directory: ./app-backend

      - name: Build Rust backend
        working-directory: ./app-backend
        run: |
           cargo build --release
#
#      - name: Deploy frontend
#        run: rsync -avz ./app-frontend/build/ your-deployment-path/
#        env:
#          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
#          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
#          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
#
#      - name: Deploy backend
#        run: scp ./app-backend/target/release/app-backend $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
#        env:
#          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
#          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
#          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
